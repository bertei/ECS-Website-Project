name: Deploy to AWS ECS

##This workflow triggers everytime website folder files are modified. Also can be manually run thanks to workflow_dispatch
on:
  push:
    branches: [ main ]
    paths:
      - 'Website/Dockerfile'
      - 'Website/**.html'
      - 'Website/**.css'
  workflow_dispatch:

jobs:
  ecs-deployment:
    name: ECS-Deployment
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./Website

    steps:
      - name: Checkout (copy repo to runner)
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      ##- name: Build, tag, and push image to AWS ECR
      ##  id: build-image
      ##  env:
      ##    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      ##    ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ##    IMAGE_TAG: ${{ github.sha }}
      ##  run: |
      ##    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      ##    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      ##    echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: "1"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push to ECR
        id: push-image
        uses: rgarcia-phi/gh-ecr-push@v1
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1
          image: $ECR_REPOSITORY:1
          is-semver: true # will push my-image:1, my-image:1.2 and my-image:1.2.3

      - name: Download task definition
        run: |
          cd ..
          aws ecs describe-task-definition --task-definition ecs-fargate-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: bernatei-website
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ecs-fargate-service
          cluster: ecs-fargate-cluster
          wait-for-service-stability: true